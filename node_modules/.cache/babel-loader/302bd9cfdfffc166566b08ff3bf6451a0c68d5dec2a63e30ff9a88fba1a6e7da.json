{"ast":null,"code":"var _jsxFileName = \"/Users/shahulhameed/movie-explorer/src/MovieContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { api } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MovieContext = /*#__PURE__*/createContext();\nexport const MovieProvider = ({\n  children\n}) => {\n  _s();\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [searchResults, setSearchResults] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [userId, setUserId] = useState(localStorage.getItem('userId'));\n  const [darkMode, setDarkMode] = useState(JSON.parse(localStorage.getItem('darkMode')) || false);\n  const [genres, setGenres] = useState([]);\n\n  // Fetch genres on app load\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const genreList = await api.getGenres();\n        setGenres(genreList);\n      } catch (error) {\n        console.error('Error fetching genres:', error);\n      }\n    };\n    fetchGenres();\n  }, []);\n\n  // Fetch favorites and handle token/userId changes\n  useEffect(() => {\n    const fetchFavorites = async () => {\n      if (token && userId) {\n        try {\n          const response = await axios.get('http://localhost:5001/favorites', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          setFavorites(response.data || []);\n        } catch (err) {\n          console.error('Error fetching favorites:', err);\n          setFavorites([]);\n        }\n      } else {\n        setFavorites([]);\n      }\n    };\n    fetchFavorites();\n    localStorage.setItem('token', token || '');\n    localStorage.setItem('userId', userId || '');\n  }, [token, userId]);\n\n  // Save dark mode preference to localStorage\n  useEffect(() => {\n    localStorage.setItem('darkMode', darkMode);\n  }, [darkMode]);\n  const toggleDarkMode = () => {\n    setDarkMode(prev => !prev);\n  };\n  const addToFavorites = async movie => {\n    if (token) {\n      try {\n        await axios.post('http://localhost:5001/favorites', {\n          movieId: movie.id,\n          movieTitle: movie.title\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        // Re-fetch favorites to sync with backend\n        const response = await axios.get('http://localhost:5001/favorites', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setFavorites(response.data || []);\n      } catch (err) {\n        console.error('Error adding to favorites:', err);\n      }\n    }\n  };\n  const removeFromFavorites = async movieId => {\n    if (token) {\n      try {\n        await axios.delete(`http://localhost:5001/favorites/${movieId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        // Re-fetch favorites to sync with backend\n        const response = await axios.get('http://localhost:5001/favorites', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setFavorites(response.data || []);\n      } catch (err) {\n        console.error('Error removing from favorites:', err);\n      }\n    }\n  };\n  const clearFavorites = () => {\n    setFavorites([]);\n    if (token) {\n      // Optionally clear all favorites on the backend (if supported)\n      // Note: Current backend doesn't support bulk delete; this would require an API endpoint\n      localStorage.removeItem('favorites');\n    }\n  };\n  const getGenreName = genreId => {\n    const genre = genres.find(g => g.id === parseInt(genreId));\n    return genre ? genre.name : 'Unknown';\n  };\n  const contextValue = {\n    trendingMovies,\n    setTrendingMovies,\n    searchResults,\n    setSearchResults,\n    favorites,\n    addToFavorites,\n    removeFromFavorites,\n    clearFavorites,\n    token,\n    setToken,\n    userId,\n    setUserId,\n    darkMode,\n    toggleDarkMode,\n    genres,\n    getGenreName\n  };\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieProvider, \"bk3jLlijMl+MGfi/3mBs6yZ7XDk=\");\n_c = MovieProvider;\nvar _c;\n$RefreshReg$(_c, \"MovieProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","api","jsxDEV","_jsxDEV","MovieContext","MovieProvider","children","_s","trendingMovies","setTrendingMovies","searchResults","setSearchResults","favorites","setFavorites","token","setToken","localStorage","getItem","userId","setUserId","darkMode","setDarkMode","JSON","parse","genres","setGenres","fetchGenres","genreList","getGenres","error","console","fetchFavorites","response","get","headers","Authorization","data","err","setItem","toggleDarkMode","prev","addToFavorites","movie","post","movieId","id","movieTitle","title","removeFromFavorites","delete","clearFavorites","removeItem","getGenreName","genreId","genre","find","g","parseInt","name","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shahulhameed/movie-explorer/src/MovieContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { api } from './api';\n\nexport const MovieContext = createContext();\n\nexport const MovieProvider = ({ children }) => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [searchResults, setSearchResults] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [userId, setUserId] = useState(localStorage.getItem('userId'));\n  const [darkMode, setDarkMode] = useState(JSON.parse(localStorage.getItem('darkMode')) || false);\n  const [genres, setGenres] = useState([]);\n\n  // Fetch genres on app load\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const genreList = await api.getGenres();\n        setGenres(genreList);\n      } catch (error) {\n        console.error('Error fetching genres:', error);\n      }\n    };\n    fetchGenres();\n  }, []);\n\n  // Fetch favorites and handle token/userId changes\n  useEffect(() => {\n    const fetchFavorites = async () => {\n      if (token && userId) {\n        try {\n          const response = await axios.get('http://localhost:5001/favorites', {\n            headers: { Authorization: `Bearer ${token}` }\n          });\n          setFavorites(response.data || []);\n        } catch (err) {\n          console.error('Error fetching favorites:', err);\n          setFavorites([]);\n        }\n      } else {\n        setFavorites([]);\n      }\n    };\n\n    fetchFavorites();\n    localStorage.setItem('token', token || '');\n    localStorage.setItem('userId', userId || '');\n  }, [token, userId]);\n\n  // Save dark mode preference to localStorage\n  useEffect(() => {\n    localStorage.setItem('darkMode', darkMode);\n  }, [darkMode]);\n\n  const toggleDarkMode = () => {\n    setDarkMode(prev => !prev);\n  };\n\n  const addToFavorites = async (movie) => {\n    if (token) {\n      try {\n        await axios.post('http://localhost:5001/favorites', {\n          movieId: movie.id,\n          movieTitle: movie.title\n        }, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        // Re-fetch favorites to sync with backend\n        const response = await axios.get('http://localhost:5001/favorites', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        setFavorites(response.data || []);\n      } catch (err) {\n        console.error('Error adding to favorites:', err);\n      }\n    }\n  };\n\n  const removeFromFavorites = async (movieId) => {\n    if (token) {\n      try {\n        await axios.delete(`http://localhost:5001/favorites/${movieId}`, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        // Re-fetch favorites to sync with backend\n        const response = await axios.get('http://localhost:5001/favorites', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        setFavorites(response.data || []);\n      } catch (err) {\n        console.error('Error removing from favorites:', err);\n      }\n    }\n  };\n\n  const clearFavorites = () => {\n    setFavorites([]);\n    if (token) {\n      // Optionally clear all favorites on the backend (if supported)\n      // Note: Current backend doesn't support bulk delete; this would require an API endpoint\n      localStorage.removeItem('favorites');\n    }\n  };\n\n  const getGenreName = (genreId) => {\n    const genre = genres.find(g => g.id === parseInt(genreId));\n    return genre ? genre.name : 'Unknown';\n  };\n\n  const contextValue = {\n    trendingMovies,\n    setTrendingMovies,\n    searchResults,\n    setSearchResults,\n    favorites,\n    addToFavorites,\n    removeFromFavorites,\n    clearFavorites,\n    token,\n    setToken,\n    userId,\n    setUserId,\n    darkMode,\n    toggleDarkMode,\n    genres,\n    getGenreName\n  };\n\n  return (\n    <MovieContext.Provider value={contextValue}>\n      {children}\n    </MovieContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}