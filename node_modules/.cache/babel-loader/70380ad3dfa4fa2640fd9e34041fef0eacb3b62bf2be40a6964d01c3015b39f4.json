{"ast":null,"code":"var _jsxFileName = \"/Users/shahulhameed/movie-explorer/src/MovieContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { api } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MovieContext = /*#__PURE__*/createContext();\nexport const MovieProvider = ({\n  children\n}) => {\n  _s();\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [searchResults, setSearchResults] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [darkMode, setDarkMode] = useState(JSON.parse(localStorage.getItem('darkMode')) || false);\n  const [genres, setGenres] = useState([]);\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Simple login state\n\n  // Fetch genres on app load\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const genreList = await api.getGenres();\n        setGenres(genreList);\n      } catch (error) {\n        console.error('Error fetching genres:', error);\n      }\n    };\n    fetchGenres();\n  }, []);\n\n  // Load favorites from localStorage on mount\n  useEffect(() => {\n    const storedFavorites = localStorage.getItem('favorites');\n    if (storedFavorites) {\n      try {\n        setFavorites(JSON.parse(storedFavorites));\n      } catch (error) {\n        console.error('Error parsing favorites:', error);\n        setFavorites([]);\n      }\n    }\n\n    // Check if user is \"logged in\" (simplified for frontend-only)\n    const storedLogin = localStorage.getItem('isLoggedIn');\n    if (storedLogin === 'true') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  // Save favorites to localStorage when they change\n  useEffect(() => {\n    if (favorites.length > 0) {\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n    } else {\n      localStorage.removeItem('favorites');\n    }\n  }, [favorites]);\n\n  // Save dark mode preference to localStorage\n  useEffect(() => {\n    localStorage.setItem('darkMode', darkMode);\n  }, [darkMode]);\n  const toggleDarkMode = () => {\n    setDarkMode(prev => !prev);\n  };\n  const addToFavorites = movie => {\n    if (!favorites.some(fav => fav.id === movie.id)) {\n      setFavorites(prev => [...prev, {\n        id: movie.id,\n        movieId: movie.id,\n        movieTitle: movie.title,\n        ...movie\n      }]);\n    }\n  };\n  const removeFromFavorites = movieId => {\n    setFavorites(prev => prev.filter(movie => movie.id !== movieId));\n  };\n  const clearFavorites = () => {\n    setFavorites([]);\n    localStorage.removeItem('favorites');\n  };\n  const getGenreName = genreId => {\n    const genre = genres.find(g => g.id === parseInt(genreId));\n    return genre ? genre.name : 'Unknown';\n  };\n  const contextValue = {\n    trendingMovies,\n    setTrendingMovies,\n    searchResults,\n    setSearchResults,\n    favorites,\n    addToFavorites,\n    removeFromFavorites,\n    clearFavorites,\n    darkMode,\n    toggleDarkMode,\n    genres,\n    getGenreName,\n    isLoggedIn,\n    setIsLoggedIn\n  };\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieProvider, \"0vsGvp8NDdVZRiVKQMztMpnui2k=\");\n_c = MovieProvider;\nvar _c;\n$RefreshReg$(_c, \"MovieProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","api","jsxDEV","_jsxDEV","MovieContext","MovieProvider","children","_s","trendingMovies","setTrendingMovies","searchResults","setSearchResults","favorites","setFavorites","darkMode","setDarkMode","JSON","parse","localStorage","getItem","genres","setGenres","isLoggedIn","setIsLoggedIn","fetchGenres","genreList","getGenres","error","console","storedFavorites","storedLogin","length","setItem","stringify","removeItem","toggleDarkMode","prev","addToFavorites","movie","some","fav","id","movieId","movieTitle","title","removeFromFavorites","filter","clearFavorites","getGenreName","genreId","genre","find","g","parseInt","name","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shahulhameed/movie-explorer/src/MovieContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { api } from './api';\n\nexport const MovieContext = createContext();\n\nexport const MovieProvider = ({ children }) => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [searchResults, setSearchResults] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [darkMode, setDarkMode] = useState(JSON.parse(localStorage.getItem('darkMode')) || false);\n  const [genres, setGenres] = useState([]);\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Simple login state\n\n  // Fetch genres on app load\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const genreList = await api.getGenres();\n        setGenres(genreList);\n      } catch (error) {\n        console.error('Error fetching genres:', error);\n      }\n    };\n    fetchGenres();\n  }, []);\n\n  // Load favorites from localStorage on mount\n  useEffect(() => {\n    const storedFavorites = localStorage.getItem('favorites');\n    if (storedFavorites) {\n      try {\n        setFavorites(JSON.parse(storedFavorites));\n      } catch (error) {\n        console.error('Error parsing favorites:', error);\n        setFavorites([]);\n      }\n    }\n\n    // Check if user is \"logged in\" (simplified for frontend-only)\n    const storedLogin = localStorage.getItem('isLoggedIn');\n    if (storedLogin === 'true') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  // Save favorites to localStorage when they change\n  useEffect(() => {\n    if (favorites.length > 0) {\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n    } else {\n      localStorage.removeItem('favorites');\n    }\n  }, [favorites]);\n\n  // Save dark mode preference to localStorage\n  useEffect(() => {\n    localStorage.setItem('darkMode', darkMode);\n  }, [darkMode]);\n\n  const toggleDarkMode = () => {\n    setDarkMode(prev => !prev);\n  };\n\n  const addToFavorites = (movie) => {\n    if (!favorites.some(fav => fav.id === movie.id)) {\n      setFavorites(prev => [...prev, { id: movie.id, movieId: movie.id, movieTitle: movie.title, ...movie }]);\n    }\n  };\n\n  const removeFromFavorites = (movieId) => {\n    setFavorites(prev => prev.filter(movie => movie.id !== movieId));\n  };\n\n  const clearFavorites = () => {\n    setFavorites([]);\n    localStorage.removeItem('favorites');\n  };\n\n  const getGenreName = (genreId) => {\n    const genre = genres.find(g => g.id === parseInt(genreId));\n    return genre ? genre.name : 'Unknown';\n  };\n\n  const contextValue = {\n    trendingMovies,\n    setTrendingMovies,\n    searchResults,\n    setSearchResults,\n    favorites,\n    addToFavorites,\n    removeFromFavorites,\n    clearFavorites,\n    darkMode,\n    toggleDarkMode,\n    genres,\n    getGenreName,\n    isLoggedIn,\n    setIsLoggedIn\n  };\n\n  return (\n    <MovieContext.Provider value={contextValue}>\n      {children}\n    </MovieContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}