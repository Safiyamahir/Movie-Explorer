{"ast":null,"code":"var _jsxFileName = \"/Users/shahulhameed/movie-explorer/src/MovieContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { api } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MovieContext = /*#__PURE__*/createContext();\nexport const MovieProvider = ({\n  children\n}) => {\n  _s();\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [searchResults, setSearchResults] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [lastSearch, setLastSearch] = useState('');\n  const [darkMode, setDarkMode] = useState(false);\n  const [token, setToken] = useState(localStorage.getItem('token')); // Track token changes\n\n  // Fetch favorites for the current user\n  const fetchFavorites = async token => {\n    if (token) {\n      try {\n        const response = await axios.get('http://localhost:5001/favorites', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setFavorites(response.data || []);\n      } catch (err) {\n        console.error('Error fetching favorites:', err);\n        setFavorites([]);\n      }\n    } else {\n      setFavorites([]);\n    }\n  };\n\n  // Clear favorites on logout\n  const clearFavorites = () => {\n    setFavorites([]);\n  };\n  useEffect(() => {\n    // Load persisted data from local storage on mount\n    const storedLastSearch = localStorage.getItem('lastSearch') || '';\n    setLastSearch(storedLastSearch);\n    const storedDarkMode = JSON.parse(localStorage.getItem('darkMode')) || false;\n    setDarkMode(storedDarkMode);\n\n    // Fetch trending movies on initial load\n    api.getTrendingMovies().then(movies => setTrendingMovies(movies));\n\n    // Fetch favorites if a token exists\n    fetchFavorites(token);\n  }, [token]); // Re-run when token changes\n\n  const addToFavorites = async movie => {\n    const currentToken = localStorage.getItem('token');\n    if (currentToken) {\n      try {\n        await axios.post('http://localhost:5001/favorites', {\n          movieId: movie.id,\n          movieTitle: movie.title\n        }, {\n          headers: {\n            Authorization: `Bearer ${currentToken}`\n          }\n        });\n        setFavorites([...favorites, {\n          movieId: movie.id,\n          movieTitle: movie.title\n        }]);\n      } catch (err) {\n        console.error('Error adding to favorites:', err);\n      }\n    }\n  };\n  const removeFromFavorites = async movieId => {\n    const currentToken = localStorage.getItem('token');\n    if (currentToken) {\n      try {\n        await axios.delete(`http://localhost:5001/favorites/${movieId}`, {\n          headers: {\n            Authorization: `Bearer ${currentToken}`\n          }\n        });\n        setFavorites(favorites.filter(fav => fav.movieId !== movieId));\n      } catch (err) {\n        console.error('Error removing from favorites:', err);\n      }\n    }\n  };\n  const setSearch = query => {\n    setLastSearch(query);\n    localStorage.setItem('lastSearch', query);\n  };\n  const toggleDarkMode = () => {\n    const newDarkMode = !darkMode;\n    setDarkMode(newDarkMode);\n    localStorage.setItem('darkMode', JSON.stringify(newDarkMode));\n  };\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: {\n      trendingMovies,\n      setTrendingMovies,\n      searchResults,\n      setSearchResults,\n      favorites,\n      addToFavorites,\n      removeFromFavorites,\n      fetchFavorites,\n      // Expose fetchFavorites\n      clearFavorites,\n      // Expose clearFavorites\n      lastSearch,\n      setSearch,\n      darkMode,\n      toggleDarkMode,\n      setToken // Expose setToken to update token state\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieProvider, \"DmfvUXkttGxdXFiDDVEDBBwleB0=\");\n_c = MovieProvider;\nvar _c;\n$RefreshReg$(_c, \"MovieProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","api","jsxDEV","_jsxDEV","MovieContext","MovieProvider","children","_s","trendingMovies","setTrendingMovies","searchResults","setSearchResults","favorites","setFavorites","lastSearch","setLastSearch","darkMode","setDarkMode","token","setToken","localStorage","getItem","fetchFavorites","response","get","headers","Authorization","data","err","console","error","clearFavorites","storedLastSearch","storedDarkMode","JSON","parse","getTrendingMovies","then","movies","addToFavorites","movie","currentToken","post","movieId","id","movieTitle","title","removeFromFavorites","delete","filter","fav","setSearch","query","setItem","toggleDarkMode","newDarkMode","stringify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shahulhameed/movie-explorer/src/MovieContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { api } from './api';\n\nexport const MovieContext = createContext();\n\nexport const MovieProvider = ({ children }) => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [searchResults, setSearchResults] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [lastSearch, setLastSearch] = useState('');\n  const [darkMode, setDarkMode] = useState(false);\n  const [token, setToken] = useState(localStorage.getItem('token')); // Track token changes\n\n  // Fetch favorites for the current user\n  const fetchFavorites = async (token) => {\n    if (token) {\n      try {\n        const response = await axios.get('http://localhost:5001/favorites', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        setFavorites(response.data || []);\n      } catch (err) {\n        console.error('Error fetching favorites:', err);\n        setFavorites([]);\n      }\n    } else {\n      setFavorites([]);\n    }\n  };\n\n  // Clear favorites on logout\n  const clearFavorites = () => {\n    setFavorites([]);\n  };\n\n  useEffect(() => {\n    // Load persisted data from local storage on mount\n    const storedLastSearch = localStorage.getItem('lastSearch') || '';\n    setLastSearch(storedLastSearch);\n    const storedDarkMode = JSON.parse(localStorage.getItem('darkMode')) || false;\n    setDarkMode(storedDarkMode);\n\n    // Fetch trending movies on initial load\n    api.getTrendingMovies().then(movies => setTrendingMovies(movies));\n\n    // Fetch favorites if a token exists\n    fetchFavorites(token);\n  }, [token]); // Re-run when token changes\n\n  const addToFavorites = async (movie) => {\n    const currentToken = localStorage.getItem('token');\n    if (currentToken) {\n      try {\n        await axios.post('http://localhost:5001/favorites', {\n          movieId: movie.id,\n          movieTitle: movie.title\n        }, {\n          headers: { Authorization: `Bearer ${currentToken}` }\n        });\n        setFavorites([...favorites, { movieId: movie.id, movieTitle: movie.title }]);\n      } catch (err) {\n        console.error('Error adding to favorites:', err);\n      }\n    }\n  };\n\n  const removeFromFavorites = async (movieId) => {\n    const currentToken = localStorage.getItem('token');\n    if (currentToken) {\n      try {\n        await axios.delete(`http://localhost:5001/favorites/${movieId}`, {\n          headers: { Authorization: `Bearer ${currentToken}` }\n        });\n        setFavorites(favorites.filter(fav => fav.movieId !== movieId));\n      } catch (err) {\n        console.error('Error removing from favorites:', err);\n      }\n    }\n  };\n\n  const setSearch = (query) => {\n    setLastSearch(query);\n    localStorage.setItem('lastSearch', query);\n  };\n\n  const toggleDarkMode = () => {\n    const newDarkMode = !darkMode;\n    setDarkMode(newDarkMode);\n    localStorage.setItem('darkMode', JSON.stringify(newDarkMode));\n  };\n\n  return (\n    <MovieContext.Provider value={{\n      trendingMovies,\n      setTrendingMovies,\n      searchResults,\n      setSearchResults,\n      favorites,\n      addToFavorites,\n      removeFromFavorites,\n      fetchFavorites, // Expose fetchFavorites\n      clearFavorites, // Expose clearFavorites\n      lastSearch,\n      setSearch,\n      darkMode,\n      toggleDarkMode,\n      setToken // Expose setToken to update token state\n    }}>\n      {children}\n    </MovieContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}