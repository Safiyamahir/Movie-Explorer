{"ast":null,"code":"var _jsxFileName = \"/Users/shahulhameed/movie-explorer/src/MovieContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { api } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MovieContext = /*#__PURE__*/createContext();\nexport const MovieProvider = ({\n  children\n}) => {\n  _s();\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [searchResults, setSearchResults] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [lastSearch, setLastSearch] = useState('');\n  const [darkMode, setDarkMode] = useState(false);\n  useEffect(() => {\n    // Load persisted data from local storage on mount\n    const storedLastSearch = localStorage.getItem('lastSearch') || '';\n    setLastSearch(storedLastSearch);\n    const storedDarkMode = JSON.parse(localStorage.getItem('darkMode')) || false;\n    setDarkMode(storedDarkMode);\n\n    // Fetch trending movies on initial load\n    api.getTrendingMovies().then(movies => setTrendingMovies(movies));\n\n    // Fetch favorites from backend if user is logged in\n    const token = localStorage.getItem('token');\n    if (token) {\n      axios.get('http://localhost:5000/favorites', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => setFavorites(response.data)).catch(err => console.error('Error fetching favorites:', err));\n    }\n  }, []);\n  const addToFavorites = async movie => {\n    const token = localStorage.getItem('token');\n    try {\n      await axios.post('http://localhost:5000/favorites', {\n        movieId: movie.id,\n        movieTitle: movie.title\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setFavorites([...favorites, {\n        movieId: movie.id,\n        movieTitle: movie.title\n      }]);\n    } catch (err) {\n      console.error('Error adding to favorites:', err);\n    }\n  };\n  const removeFromFavorites = async movieId => {\n    const token = localStorage.getItem('token');\n    try {\n      await axios.delete(`http://localhost:5000/favorites/${movieId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setFavorites(favorites.filter(fav => fav.movieId !== movieId));\n    } catch (err) {\n      console.error('Error removing from favorites:', err);\n    }\n  };\n  const setSearch = query => {\n    setLastSearch(query);\n    localStorage.setItem('lastSearch', query);\n  };\n  const toggleDarkMode = () => {\n    const newDarkMode = !darkMode;\n    setDarkMode(newDarkMode);\n    localStorage.setItem('darkMode', JSON.stringify(newDarkMode));\n  };\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: {\n      trendingMovies,\n      setTrendingMovies,\n      searchResults,\n      setSearchResults,\n      favorites,\n      addToFavorites,\n      removeFromFavorites,\n      lastSearch,\n      setSearch,\n      darkMode,\n      toggleDarkMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieProvider, \"jw6ZNYcqJ9NHmEo77h48vO8MT8Q=\");\n_c = MovieProvider;\nvar _c;\n$RefreshReg$(_c, \"MovieProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","api","jsxDEV","_jsxDEV","MovieContext","MovieProvider","children","_s","trendingMovies","setTrendingMovies","searchResults","setSearchResults","favorites","setFavorites","lastSearch","setLastSearch","darkMode","setDarkMode","storedLastSearch","localStorage","getItem","storedDarkMode","JSON","parse","getTrendingMovies","then","movies","token","get","headers","Authorization","response","data","catch","err","console","error","addToFavorites","movie","post","movieId","id","movieTitle","title","removeFromFavorites","delete","filter","fav","setSearch","query","setItem","toggleDarkMode","newDarkMode","stringify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shahulhameed/movie-explorer/src/MovieContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { api } from './api';\n\nexport const MovieContext = createContext();\n\nexport const MovieProvider = ({ children }) => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [searchResults, setSearchResults] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [lastSearch, setLastSearch] = useState('');\n  const [darkMode, setDarkMode] = useState(false);\n\n  useEffect(() => {\n    // Load persisted data from local storage on mount\n    const storedLastSearch = localStorage.getItem('lastSearch') || '';\n    setLastSearch(storedLastSearch);\n    const storedDarkMode = JSON.parse(localStorage.getItem('darkMode')) || false;\n    setDarkMode(storedDarkMode);\n\n    // Fetch trending movies on initial load\n    api.getTrendingMovies().then(movies => setTrendingMovies(movies));\n\n    // Fetch favorites from backend if user is logged in\n    const token = localStorage.getItem('token');\n    if (token) {\n      axios.get('http://localhost:5000/favorites', {\n        headers: { Authorization: `Bearer ${token}` }\n      })\n        .then(response => setFavorites(response.data))\n        .catch(err => console.error('Error fetching favorites:', err));\n    }\n  }, []);\n\n  const addToFavorites = async (movie) => {\n    const token = localStorage.getItem('token');\n    try {\n      await axios.post('http://localhost:5000/favorites', {\n        movieId: movie.id,\n        movieTitle: movie.title\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setFavorites([...favorites, { movieId: movie.id, movieTitle: movie.title }]);\n    } catch (err) {\n      console.error('Error adding to favorites:', err);\n    }\n  };\n\n  const removeFromFavorites = async (movieId) => {\n    const token = localStorage.getItem('token');\n    try {\n      await axios.delete(`http://localhost:5000/favorites/${movieId}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setFavorites(favorites.filter(fav => fav.movieId !== movieId));\n    } catch (err) {\n      console.error('Error removing from favorites:', err);\n    }\n  };\n\n  const setSearch = (query) => {\n    setLastSearch(query);\n    localStorage.setItem('lastSearch', query);\n  };\n\n  const toggleDarkMode = () => {\n    const newDarkMode = !darkMode;\n    setDarkMode(newDarkMode);\n    localStorage.setItem('darkMode', JSON.stringify(newDarkMode));\n  };\n\n  return (\n    <MovieContext.Provider value={{\n      trendingMovies,\n      setTrendingMovies,\n      searchResults,\n      setSearchResults,\n      favorites,\n      addToFavorites,\n      removeFromFavorites,\n      lastSearch,\n      setSearch,\n      darkMode,\n      toggleDarkMode\n    }}>\n      {children}\n    </MovieContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}